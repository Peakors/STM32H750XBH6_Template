# SPDX-License-Identifier: GPL-2.0-or-later

# This is a FK750M5-XBH6 with a single STM32H750XBH6 chip.
# Board：FK750M4-XBH6、FK750M5-XBH6、FK750M6-XBH6（32bit-SDRAM）
# ##Supports ARMFLY STM32-V7 board STM32H743/STM32H750 (not tested)
# Purchase Store: https://shop212360197.taobao.com/
# QQ group：536665479
# Author: Peakors

# This is for using the STLINK
source [find interface/stlink.cfg]

# This is for using the DAPLINK
# adapter driver cmsis-dap

# Select SWD transport protocol
transport select swd

# Define target chip name variable
set CHIPNAME STM32H750XBH6

# Set flag to enable Quad-SPI controller (1 = enabled, 0 = disable)
set QUADSPI 1

# Ensure Quad-SPI variable exists (compatibility safeguard)
if {![info exists QUADSPI]} {
    set QUADSPI 1
}

# Load OpenOCD STM32H7 series common configuration
source [find target/stm32h7x.cfg]

# Reset configuration
reset_config srst_only

# QUAD-SPI initialization(a function)
proc qspi_init { qpi } {
    global a
    
    # Enable GPIOA-K clocks (AHB4 bus)
    mmw 0x580244E0 0x000007FF 0             ; # RCC_AHB4ENR |= GPIOAEN-GPIOKEN (enable clocks)
    
    # Enable Quad-SPI peripheral clock (AHB3 bus)
    mmw 0x580244D4 0x00004000 0             ; # RCC_AHB3ENR |= QSPIEN (enable clock)
    
    # Wait for clock stabilization
    sleep 1                                 ;# Wait for clock startup

	# Configure GPIOF alternate functions (QSPI pins)
	# Port F: PF10:AF09:H, PF09:AF10:H, PF08:AF10:H, PF07:AF09:H, PF06:AF09:H
    mmw 0x58021400 0x002AA000 0x00155000    ; # MODER: Set PF6-PF10 as alternate function
    mmw 0x58021408 0x002AA000 0x00155000    ; # OSPEEDR: Set high speed
    mmw 0x5802140C 0x00000000 0x003FF000    ; # PUPDR: No pull-up/pull-down
    mmw 0x58021420 0x99000000 0x66000000    ; # AFRL: Configure PF0-PF7 alternate functions
    mmw 0x58021424 0x000009AA 0x00000655    ; # AFRH: Configure PF8-PF15 alternate functions
	
	# Configure GPIOG alternate function (QSPI chip select)
	# Port G: PG06:AF10:H
    mmw 0x58021800 0x00002000 0x00001000    ; # MODER: Set PG6 as alternate function
    mmw 0x58021808 0x00002000 0x00001000    ; # OSPEEDR: High speed
    mmw 0x5802180C 0x00000000 0x00003000    ; # PUPDR: No pull-up/pull-down
    mmw 0x58021820 0x0A000000 0x05000000    ; # AFRL: Set PG6 to AF10

    # Configure Quad-SPI controller parameters
    mww 0x52005000 0x01000F10               ;
        # QUADSPI_CR:
        # PRESCALER=1 (clock divider=2), 
        # FTHRES=0xF (FIFO threshold=15), 
        # FSEL=0, DFM=0, SSHIFT=1 (enable sample shift)
    mww 0x52005004 0x00160001               ;
        # QUADSPI_DCR:
        # FSIZE=0x16 (Flash size = 2^24 bytes = 16MB), 
        # CSHT=0 (chip select high time=1 cycle), 
        # CKMODE=1 (clock high when idle)
    mmw 0x52005000 0x00000001 0             ;
        # QUADSPI_CR: Enable controller (EN=1)
    
    # Configure memory-mapped mode (single-SPI, 3-byte address)
    mww 0x52005014 0x0D002503               ;
        # QUADSPI_CCR:
        # FMODE=3 (memory-mapped mode), 
        # DMODE=1 (single-line for data), 
        # DCYC=0 (dummy cycles), 
        # ADSIZE=2 (24-bit address), 
        # ADMODE=1 (single-line for address), 
        # IMODE=1 (single-line for instruction), 
        # INSTR=0x03 (SPI READ command)

}


# CPU reset initialization event handler
$_CHIPNAME.cpu0 configure -event reset-init {
    global QUADSPI

	# Configure Flash wait states (4 wait states for 192MHz operation)
    mmw 0x52002000 0x00000004 0x0000000B    ;# FLASH_ACR: LATENCY=4
    
    
    # Clock tree configuration
    mmw 0x58024400 0x00000001 0x00000018    ;
        # RCC_CR:
        # Enable HSI clock (HSION=1), 
        # HSI divider=1 (64MHz output)
    mmw 0x58024410 0x10000000 0xEE000007    ;
        # RCC_CFGR:
        # Select HSI as system clock (SW=0), 
        # MCO2 prescaler=8
    mww 0x58024418 0x00000040               ;
        # RCC_D1CFGR:
        # D1 domain AHB prescaler=1 (no division), 
        # APB3 prescaler=2 (D1PPRE=2)
    mww 0x5802441C 0x00000440               ;
        # RCC_D2CFGR:
        # APB1 prescaler=2 (D2PPRE1=2), 
        # APB2 prescaler=2 (D2PPRE2=2)
    mww 0x58024420 0x00000040               ;
        # RCC_D3CFGR:
        # APB4 prescaler=2 (D3PPRE=2)
    mww 0x58024428 0x00000040               ;
        # RCC_PPLCKSELR:
        # PLL1 source=HSI, 
        # Input divider M1=4 (64MHz / 4 = 16MHz)
    
    # Configure PLL1 parameters
    mmw 0x5802442C 0x0001000C 0x00000002    ;
        # RCC_PLLCFGR:
        # PLL1 input range=8-16MHz (PLL1RGE=01), 
        # PLL1 VCO selection=wide (PLL1VCOSEL=0)
    mww 0x58024430 0x01070217               ;
        # RCC_PLL1DIVR:
        # DIVP1=2, DIVQ=8, DIVR1=2, DIVN1=24
        # PLL1 output frequency = (64MHz / M1) × N1 / P1 = (64/4) × 24 / 2 = 192MHz
    
    # Enable PLL1
    mmw 0x58024400 0x01000000 0             ; # RCC_CR: PLL1ON=1
    sleep 1                                 ; # Wait for PLL lock
    
    # Switch system clock to PLL1
    mmw 0x58024410 0x00000003 0             ; # RCC_CFGR: SW=11 (PLL1 as system clock)
    sleep 1                                 ; # Wait for clock switch completion
    
    # Reduce adapter speed for reliable initialization (24kHz)
    adapter speed 24000
    
    # Initialize Quad-SPI if enabled
    if { $QUADSPI } {
        qspi_init 1
    }
}
